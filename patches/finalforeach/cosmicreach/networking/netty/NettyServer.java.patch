--- a/finalforeach/cosmicreach/networking/netty/NettyServer.java
+++ b/finalforeach/cosmicreach/networking/netty/NettyServer.java
@@ -14,24 +_,24 @@
 import finalforeach.cosmicreach.util.ArrayUtils;
 import finalforeach.cosmicreach.world.Zone;
 import io.netty.bootstrap.ServerBootstrap;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.ChannelInitializer;
-import io.netty.channel.ChannelOption;
-import io.netty.channel.EventLoopGroup;
+import io.netty.channel.*;
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.SocketChannel;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 
-public class NettyServer {
-	public final ServerBroadcastIdentity broadcastIdentity;
+import java.net.InetSocketAddress;
+
+public class NettyServer extends com.github.puzzle.paradox.game.server.ParadoxServer {
 	private int port;
-	Array<ServerIdentity> connections = new Array<>();
-	ObjectMap<ChannelHandlerContext, ServerIdentity> contextToIdentity = new ObjectMap<>();
+	public final ServerBroadcastIdentity broadcastIdentity;
+
+	public Array<ServerIdentity> connections = new Array<>();
+	public ObjectMap<ChannelHandlerContext, ServerIdentity> contextToIdentity = new ObjectMap<>();
 
 	public NettyServer(int port) {
 		this.port = port;
 		this.broadcastIdentity = new ServerBroadcastIdentity(this);
+		LOGGER.info("Using port: {}",port);
 	}
 
 	public NettyServer() {
@@ -39,8 +_,8 @@
 	}
 
 	public void run() throws Exception {
-		EventLoopGroup eventloopgroup = new NioEventLoopGroup();
-		EventLoopGroup eventloopgroup1 = new NioEventLoopGroup();
+		eventloopgroup = new NioEventLoopGroup();
+		eventloopgroup1 = new NioEventLoopGroup();
 
 		try {
 			ServerBootstrap serverbootstrap = new ServerBootstrap();
@@ -49,9 +_,10 @@
 					ch.pipeline().addLast(new ByteArrayDataEncoder(), new ByteArrayDataDecoder(), new ServerHandler(NettyServer.this));
 				}
 			}).option(ChannelOption.SO_BACKLOG, Integer.valueOf(128)).childOption(ChannelOption.SO_KEEPALIVE, true);
-			ChannelFuture channelfuture = serverbootstrap.bind(this.port).sync();
+			channelfuture = serverbootstrap.bind(this.port).sync();
 			channelfuture.channel().closeFuture().sync();
 		} finally {
+			ServerSingletons.puzzle.exit();
 			eventloopgroup1.shutdownGracefully();
 			eventloopgroup.shutdownGracefully();
 		}
@@ -60,10 +_,12 @@
 	public void broadcastToAll(GamePacket packet) {
 		packet.setupAndSendToAll(this.connections);
 	}
-
 	public void broadcastAsServerExcept(GamePacket packet, NetworkIdentity identity) {
 		packet.setupAndSendToAllExcept(this.connections, identity);
 	}
+	public void send(GamePacket packet, ChannelHandlerContext ctx) {
+		packet.setupAndSend(ctx);
+	}
 
 	public void addContext(ChannelHandlerContext ctx) {
 		ServerIdentity serveridentity = new ServerIdentity(this, ctx);
@@ -73,19 +_,24 @@
 
 	public void removeContext(ChannelHandlerContext ctx) {
 		ServerIdentity serveridentity = this.contextToIdentity.get(ctx);
-		Player player = ServerSingletons.getPlayer(serveridentity);
-		if (player != null) {
-			PlayerSaver.savePlayer(GameSingletons.world, player);
-			ServerSingletons.removeAccount(serveridentity);
+		if(!serveridentity.shouldIgnore) {
+			var addy = ((InetSocketAddress) ctx.channel().remoteAddress());
+			if (!serveridentity.waskicked)
+				LOGGER.info("Player uid '{}' left | {}:{}", getAccount(ctx).getUniqueId(), addy.getAddress().getHostAddress(), addy.getPort());
+			Player player = ServerSingletons.getPlayer(serveridentity);
+			if (player != null) {
+				PlayerSaver.savePlayer(GameSingletons.world, player);
+				ServerSingletons.removeAccount(serveridentity);
+			}
 		}
 
 		this.connections.removeValue(serveridentity, true);
 		this.contextToIdentity.remove(ctx);
 	}
-
 	public int getPort() {
 		return this.port;
 	}
+
 
 	public Account getAccount(ChannelHandlerContext ctx) {
 		ServerIdentity serveridentity = this.contextToIdentity.get(ctx);

--- a/finalforeach/cosmicreach/networking/netty/NettyServer.java
+++ b/finalforeach/cosmicreach/networking/netty/NettyServer.java
@@ -18,25 +_,27 @@
 import finalforeach.cosmicreach.networking.server.ServerIdentity;
 import finalforeach.cosmicreach.networking.server.ServerSettings;
 import finalforeach.cosmicreach.networking.server.ServerSingletons;
+import finalforeach.cosmicreach.server.ServerLauncher;
 import finalforeach.cosmicreach.util.ArrayUtils;
 import finalforeach.cosmicreach.util.logging.Logger;
 import finalforeach.cosmicreach.world.IZoneLoader;
 import finalforeach.cosmicreach.world.Zone;
 import io.netty.bootstrap.ServerBootstrap;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.ChannelInitializer;
-import io.netty.channel.ChannelOption;
-import io.netty.channel.EventLoopGroup;
+import io.netty.channel.*;
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.SocketChannel;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
 
-public class NettyServer {
-	public final ServerBroadcastIdentity broadcastIdentity;
+import java.net.InetSocketAddress;
+
+public class NettyServer extends com.github.puzzle.paradox.game.server.ParadoxServer {
 	private int port;
+	public final ServerBroadcastIdentity broadcastIdentity;
+
+	public Array<ServerIdentity> connections = new Array<>();
+	public ObjectMap<ChannelHandlerContext, ServerIdentity> contextToIdentity = new ObjectMap<>();
 	private ChannelFuture channelFuture;
 	public IChat systemChat = new IChat() {
 		@Override
@@ -48,9 +_,6 @@
 			}
 		}
 	};
-	Array<ServerIdentity> connections = new Array<>();
-	ObjectMap<ChannelHandlerContext, ServerIdentity> contextToIdentity = new ObjectMap<>();
-
 	public NettyServer(int port) {
 		this.port = port;
 		this.broadcastIdentity = new ServerBroadcastIdentity(this);
@@ -62,8 +_,8 @@
 	}
 
 	public void run() throws Exception {
-		EventLoopGroup eventloopgroup = new NioEventLoopGroup();
-		EventLoopGroup eventloopgroup1 = new NioEventLoopGroup();
+		eventloopgroup = new NioEventLoopGroup();
+		eventloopgroup1 = new NioEventLoopGroup();
 
 		try {
 			ServerBootstrap serverbootstrap = new ServerBootstrap();
@@ -73,23 +_,32 @@
 				}
 			}).option(ChannelOption.SO_BACKLOG, Integer.valueOf(128)).childOption(ChannelOption.SO_KEEPALIVE, true);
 			this.channelFuture = serverbootstrap.bind(this.port).sync();
-			BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in));
-			String s = null;
-			Logger.info("Server started, type 'stop' to shutdown and 'help' for commands.");
-
+			LOGGER.info("Server started, type 'stop' to shutdown and 'help' for commands.");
+			/*
 			while (!"stop".equals(s) && this.channelFuture.channel().isActive()) {
 				s = bufferedreader.readLine();
 				this.processCommand(s);
 			}
-
-			this.shutdown();
+			 */
+			LOGGER.info("Using port: {}",port);
+
+
+			while(ServerLauncher.isRunning() &&  this.channelFuture.channel().isActive()) {
+
+			}
+			shutdown();
 			this.channelFuture.channel().closeFuture().sync();
-		} finally {
-			eventloopgroup1.shutdownGracefully();
-			eventloopgroup.shutdownGracefully();
+			eventloopgroup.shutdownGracefully();
+			eventloopgroup1.shutdownGracefully();
+;
+		} catch (Throwable th) {
+			eventloopgroup1.shutdownGracefully();
+			eventloopgroup.shutdownGracefully();
+			throw th;
+
 		}
 
-		Logger.info("Server closed.");
+		LOGGER.info("Server closed.");
 	}
 
 	public void processCommand(String commandLine) {
@@ -112,10 +_,12 @@
 	public void broadcastToAll(GamePacket packet) {
 		packet.setupAndSendToAll(this.connections);
 	}
-
 	public void broadcastAsServerExcept(GamePacket packet, NetworkIdentity identity) {
 		packet.setupAndSendToAllExcept(this.connections, identity);
 	}
+	public void send(GamePacket packet, ChannelHandlerContext ctx) {
+		packet.setupAndSend(ctx);
+	}
 
 	public void addContext(ChannelHandlerContext ctx) {
 		ServerIdentity serveridentity = new ServerIdentity(this, ctx);
@@ -125,19 +_,24 @@
 
 	public void removeContext(ChannelHandlerContext ctx) {
 		ServerIdentity serveridentity = this.contextToIdentity.get(ctx);
-		Player player = ServerSingletons.getPlayer(serveridentity);
-		if (player != null) {
-			PlayerSaver.savePlayer(GameSingletons.world, player);
-			ServerSingletons.removeAccount(serveridentity);
+		if(!serveridentity.shouldIgnore) {
+			var addy = ((InetSocketAddress) ctx.channel().remoteAddress());
+			if (!serveridentity.waskicked)
+				LOGGER.info("Player uid '{}' left | {}:{}", getAccount(ctx).getUniqueId(), addy.getAddress().getHostAddress(), addy.getPort());
+			Player player = ServerSingletons.getPlayer(serveridentity);
+			if (player != null) {
+				PlayerSaver.savePlayer(GameSingletons.world, player);
+				ServerSingletons.removeAccount(serveridentity);
+			}
 		}
 
 		this.connections.removeValue(serveridentity, true);
 		this.contextToIdentity.remove(ctx);
 	}
-
 	public int getPort() {
 		return this.port;
 	}
+
 
 	public Account getAccount(ChannelHandlerContext ctx) {
 		ServerIdentity serveridentity = this.contextToIdentity.get(ctx);

--- a/finalforeach/cosmicreach/networking/packets/MessagePacket.java
+++ b/finalforeach/cosmicreach/networking/packets/MessagePacket.java
@@ -11,6 +_,8 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 
+import static com.github.puzzle.paradox.core.PuzzlePL.SERVER_ACCOUNT;
+
 public class MessagePacket extends GamePacket {
 	public static final int MAX_MESSAGE_LENGTH = 256;
 	public String playerUniqueId;
@@ -50,22 +_,25 @@
 
 			Chat.MAIN_CLIENT_CHAT.addMessage(account, s);
 		} else {
-			if (this.message.length() > 256) {
-				ctx.disconnect();
-				return;
-			}
-
-			Account account1 = ServerSingletons.getAccount(identity);
-			String s1 = "Chat from " + account1.getUniqueId() + " | " + account1.getDisplayName() + ": " + this.message;
-			if (this.message.contains("\n")) {
-				Logger.warn("Dropping message from " + account1.getUniqueId() + " | " + account1.getDisplayName() + " which contained new lines.");
-				Logger.warn("Dropped " + s1.replaceAll("\n", "\n|-->"));
-				return;
-			}
-
-			Logger.info(s1);
-			this.playerUniqueId = account1.getUniqueId();
-			ServerSingletons.SERVER.broadcastAsServerExcept(this, identity);
+			if(!com.github.puzzle.paradox.game.server.ParadoxServerSettings.canChat){
+				ctx.disconnect();
+				return;
+			}
+			if (this.message.length() > MAX_MESSAGE_LENGTH) {
+				ctx.disconnect();
+				return;
+			}
+
+//			if((message.charAt(0)=='\\' || message.charAt(0)=='.') && com.github.puzzle.paradox.game.server.ParadoxServerSettings.executeChatCommands) {
+//				com.github.puzzle.paradox.game.command.CommandParsing.parse(this,message,identity,ctx);
+//			}else {
+				Account account1 = ServerSingletons.getAccount(identity);
+				Logger.info("Chat from " + account1.getUniqueId() +" | " /*+ ServerSingletons.server.contextToIdentity.get(ctx).clientName + " | "*/ + account1.getDisplayName() + ": " + this.message);
+				this.playerUniqueId = account1.getUniqueId();
+				var pack = new MessagePacket(account1.getDisplayName()+"> " + this.message);
+				pack.playerUniqueId = SERVER_ACCOUNT.getUniqueId();
+				ServerSingletons.SERVER.broadcastAsServerExcept(pack, identity);
+//			}
 		}
 	}
 }

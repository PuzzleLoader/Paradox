--- a/finalforeach/cosmicreach/world/Zone.java
+++ b/finalforeach/cosmicreach/world/Zone.java
@@ -7,9 +_,9 @@
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.Json;
-import com.badlogic.gdx.utils.JsonValue;
 import com.badlogic.gdx.utils.ObjectMap;
 import com.badlogic.gdx.utils.Json.Serializable;
+import com.badlogic.gdx.utils.JsonValue;
 import com.badlogic.gdx.utils.JsonWriter.OutputType;
 import finalforeach.cosmicreach.GameSingletons;
 import finalforeach.cosmicreach.RandomTicks;
@@ -32,6 +_,8 @@
 import finalforeach.cosmicreach.util.Point3DMap;
 import finalforeach.cosmicreach.util.logging.Logger;
 import finalforeach.cosmicreach.worldgen.ZoneGenerator;
+import org.slf4j.LoggerFactory;
+
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -41,7 +_,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Consumer;
 
-public class Zone implements Serializable, Disposable {
+public class Zone extends com.github.puzzle.paradox.game.server.InternalParadoxZone implements Serializable, Disposable {
 	public PriorityQueue<ScheduledTrigger> eventQueue = new PriorityQueue<>((a, b) -> a.triggerTick() - b.triggerTick());
 	public Array<BlockEntity> tickingBlockEntities = new Array<>();
 	public Array<BlockEntity> allRenderableBlockEntities = new Array<>();
@@ -60,12 +_,13 @@
 	public float respawnHeight = -64.0F;
 	private String skyId;
 	private transient World world;
-	private transient MobSpawner mobSpawner = new MobSpawner();
+	public transient MobSpawner mobSpawner = new MobSpawner();
 	private RandomTicks randomTicks;
 	private final Array<Chunk> toRemove = new Array<>(false, 4096, Chunk.class);
 	int totalSpawnAttempts;
 	private LightPropagator lightPropagator = new LightPropagator();
 
+   private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger("Cosmic Reach | Zone");
 	private Zone() {
 		this.randomTicks = new RandomTicks(this);
 	}
@@ -546,7 +_,7 @@
 	public boolean calculateSpawn() {
 		Vector2 vector2 = new Vector2();
 		this.zoneGenerator.getSpawnPoint(vector2, this.totalSpawnAttempts++);
-		Logger.info("Calculating at spawn at " + vector2);
+      	LOGGER.info("Calculating at spawn at " + vector2);
 		this.spawnPoint = new Vector3(vector2.x, 100.0F, vector2.y);
 		return true;
 	}
@@ -562,13 +_,13 @@
 			if (--i < -150 || blockstate == Block.WATER.getDefaultBlockState()) {
 				int b0 = 100;
 				this.spawnPoint = new Vector3((float)j, (float)b0, (float)k);
-				Logger.info("Spawnpoint at " + this.spawnPoint + " was not valid");
+				LOGGER.info("Spawnpoint at " + this.spawnPoint + " was not valid");
 				return false;
 			}
 		}
 
 		this.spawnPoint = new Vector3((float)j, (float)(i + 1), (float)k);
-		Logger.info("Spawnpoint at " + this.spawnPoint + " was valid!");
+		LOGGER.info("Spawnpoint at " + this.spawnPoint + " was valid!");
 		return blockstate != null && !blockstate.walkThrough;
 	}
 

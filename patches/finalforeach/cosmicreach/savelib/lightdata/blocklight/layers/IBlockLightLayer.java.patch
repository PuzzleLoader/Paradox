--- a/finalforeach/cosmicreach/savelib/lightdata/blocklight/layers/IBlockLightLayer.java
+++ b/finalforeach/cosmicreach/savelib/lightdata/blocklight/layers/IBlockLightLayer.java
@@ -1,81 +_,99 @@
 package finalforeach.cosmicreach.savelib.lightdata.blocklight.layers;
 
+import java.io.IOException;
+
 import finalforeach.cosmicreach.savelib.IChunkByteReader;
 import finalforeach.cosmicreach.savelib.IChunkByteWriter;
 import finalforeach.cosmicreach.savelib.ISaveFileConstant;
+import finalforeach.cosmicreach.savelib.ISavedChunk;
+import finalforeach.cosmicreach.savelib.SaveFileConstants;
 import finalforeach.cosmicreach.savelib.lightdata.blocklight.BlockLightLayeredData;
-import java.io.IOException;
-
-public interface IBlockLightLayer extends ISaveFileConstant {
-	int CHUNK_WIDTH = 16;
-
-	short getBlockLight(int var1, int var2);
-
-	void setBlockLight(int var1, int var2, int var3, int var4, int var5);
-
-	void writeTo(IChunkByteWriter var1);
-
-	static IBlockLightLayer readFrom(int layerType, int yLevel, BlockLightLayeredData blockLightLayeredData, IChunkByteReader reader) throws IOException {
-		switch (layerType) {
-			case 1:
-				int k = reader.readByte();
-				int i = reader.readByte();
-				int j = reader.readByte();
-				BlockLightSingleLayer blocklightsinglelayer = new BlockLightSingleLayer(blockLightLayeredData, yLevel, k, i, j);
-				blockLightLayeredData.setLayer(yLevel, blocklightsinglelayer);
-				return blocklightsinglelayer;
-			case 2:
-				BlockLightShortLayer blocklightshortlayer = BlockLightShortLayer.readFrom(reader);
-				blockLightLayeredData.setLayer(yLevel, blocklightshortlayer);
-				return blocklightshortlayer;
-			case 3:
-				BlockLightMonoRedNibbleLayer blocklightmonorednibblelayer = BlockLightMonoRedNibbleLayer.readFrom(reader, blockLightLayeredData, yLevel);
-				blockLightLayeredData.setLayer(yLevel, blocklightmonorednibblelayer);
-				return blocklightmonorednibblelayer;
-			case 4:
-				BlockLightMonoGreenNibbleLayer blocklightmonogreennibblelayer = BlockLightMonoGreenNibbleLayer.readFrom(reader, blockLightLayeredData, yLevel);
-				blockLightLayeredData.setLayer(yLevel, blocklightmonogreennibblelayer);
-				return blocklightmonogreennibblelayer;
-			case 5:
-				BlockLightMonoBlueNibbleLayer blocklightmonobluenibblelayer = BlockLightMonoBlueNibbleLayer.readFrom(reader, blockLightLayeredData, yLevel);
-				blockLightLayeredData.setLayer(yLevel, blocklightmonobluenibblelayer);
-				return blocklightmonobluenibblelayer;
-			default:
-				throw new RuntimeException("Unknown layerType: " + layerType);
-		}
-	}
-
-	default IBlockLightLayer.DebugLightInfo[] getDebugLights() {
-		IBlockLightLayer.DebugLightInfo[] aiblocklightlayer$debuglightinfo = new IBlockLightLayer.DebugLightInfo[256];
-		int i = 0;
-
-		for (int j = 0; j < 16; j++) {
-			for (int k = 0; k < 16; k++) {
-				int l = this.getBlockLight(j, k);
-				int i1 = (l & 3840) >> 8;
-				int j1 = (l & 240) >> 4;
-				int k1 = l & 15;
-				aiblocklightlayer$debuglightinfo[i++] = new IBlockLightLayer.DebugLightInfo(i1, j1, k1);
-			}
-		}
-
-		return aiblocklightlayer$debuglightinfo;
-	}
-
-	public static class DebugLightInfo {
-		int r;
-		int g;
-		int b;
-
-		DebugLightInfo(int r, int g, int b) {
-			this.r = r;
-			this.g = g;
-			this.b = b;
-		}
-
+
+public interface IBlockLightLayer extends ISaveFileConstant
+{
+	final int CHUNK_WIDTH = ISavedChunk.CHUNK_WIDTH;
+
+	short getBlockLight(int localX, int localZ);
+
+	void setBlockLight(int lightLevelRed, int lightLevelGreen, int lightLevelBlue, int localX, int localZ);
+
+	void writeTo(IChunkByteWriter allChunksWriter);
+
+	static IBlockLightLayer readFrom(int layerType, int yLevel, BlockLightLayeredData blockLightLayeredData, IChunkByteReader reader) throws IOException 
+	{
+		switch(layerType) 
+		{
+		case SaveFileConstants.BLOCKLIGHTDATA_LAYER_SINGLE:
+		{
+			int r = reader.readByte();
+			int g = reader.readByte();
+			int b = reader.readByte();
+			var layer = new BlockLightSingleLayer(blockLightLayeredData, yLevel, r, g, b);
+			blockLightLayeredData.setLayer(yLevel, layer);
+			return layer;
+		}
+		case SaveFileConstants.BLOCKLIGHTDATA_LAYER_SHORT:
+		{
+			var layer = BlockLightShortLayer.readFrom(reader);
+			blockLightLayeredData.setLayer(yLevel, layer);
+			return layer;								
+		}
+		case SaveFileConstants.BLOCKLIGHTDATA_LAYER_MONO_NIBBLE_RED:
+		{
+			var layer = BlockLightMonoRedNibbleLayer.readFrom(reader, blockLightLayeredData, yLevel);
+			blockLightLayeredData.setLayer(yLevel, layer);
+			return layer;
+		}
+		case SaveFileConstants.BLOCKLIGHTDATA_LAYER_MONO_NIBBLE_GREEN:
+		{
+			var layer = BlockLightMonoGreenNibbleLayer.readFrom(reader, blockLightLayeredData, yLevel);
+			blockLightLayeredData.setLayer(yLevel, layer);
+			return layer;
+		}
+		case SaveFileConstants.BLOCKLIGHTDATA_LAYER_MONO_NIBBLE_BLUE:
+		{
+			var layer = BlockLightMonoBlueNibbleLayer.readFrom(reader, blockLightLayeredData, yLevel);
+			blockLightLayeredData.setLayer(yLevel, layer);
+			return layer;
+		}
+		default:
+			throw new RuntimeException("Unknown layerType: " + layerType);
+		}
+	}
+
+	class DebugLightInfo
+	{
+		int r, g, b;
+		DebugLightInfo(int r, int g, int b)
+		{
+			this.r=r;
+			this.g=g;
+			this.b=b;
+		}
 		@Override
-		public String toString() {
-			return this.r + "," + this.g + "," + this.b;
-		}
-	}
+		public String toString() 
+		{
+			return r + "," + g + "," + b;
+		}
+	}
+	default DebugLightInfo[] getDebugLights() 
+	{
+		var d = new DebugLightInfo[CHUNK_WIDTH * CHUNK_WIDTH];
+
+		int di = 0;
+		for(int i = 0; i < CHUNK_WIDTH; i++) 
+		{
+			for(int k = 0; k < CHUNK_WIDTH; k++) 
+			{
+				int l = getBlockLight(i, k);
+				int r = (l & 0xF00) >> 8;
+				int g = (l & 0x0F0) >> 4;
+				int b = (l & 0x00F);
+				d[di++] = new DebugLightInfo(r, g, b);
+			}
+		}
+
+		return d;
+	}
+
 }

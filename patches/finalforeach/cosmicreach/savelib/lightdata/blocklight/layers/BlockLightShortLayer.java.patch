--- a/finalforeach/cosmicreach/savelib/lightdata/blocklight/layers/BlockLightShortLayer.java
+++ b/finalforeach/cosmicreach/savelib/lightdata/blocklight/layers/BlockLightShortLayer.java
@@ -1,55 +_,64 @@
 package finalforeach.cosmicreach.savelib.lightdata.blocklight.layers;
 
+import java.io.IOException;
+
 import finalforeach.cosmicreach.savelib.IChunkByteReader;
 import finalforeach.cosmicreach.savelib.IChunkByteWriter;
-import java.io.IOException;
-
-public class BlockLightShortLayer implements IBlockLightLayer {
-	private short[] lightLevels = new short[256];
-
-	public BlockLightShortLayer(short lightLevel) {
-		for (int i = 0; i < this.lightLevels.length; i++) {
-			this.lightLevels[i] = lightLevel;
+import finalforeach.cosmicreach.savelib.SaveFileConstants;
+
+public class BlockLightShortLayer implements IBlockLightLayer
+{
+	private short[] lightLevels = new short[CHUNK_WIDTH * CHUNK_WIDTH];	
+
+	public BlockLightShortLayer(short lightLevel) 
+	{
+		for(int i = 0; i < lightLevels.length; i++) 
+		{
+			lightLevels[i] = lightLevel;
 		}
 	}
-
-	public BlockLightShortLayer() {
+	
+	public BlockLightShortLayer() 
+	{
 	}
 
 	@Override
 	public short getBlockLight(int localX, int localZ) {
-		int i = localX + localZ * 16;
-		return this.lightLevels[i];
+		int idx = localX + (localZ * CHUNK_WIDTH);
+		return lightLevels[idx];
 	}
 
 	@Override
-	public void setBlockLight(int lightLevelRed, int lightLevelGreen, int lightLevelBlue, int localX, int localZ) {
-		int i = localX + localZ * 16;
-		this.lightLevels[i] = (short)((lightLevelRed << 8) + (lightLevelGreen << 4) + lightLevelBlue);
+	public void setBlockLight(int lightLevelRed, int lightLevelGreen, int lightLevelBlue, int localX, int localZ)
+	{
+		int idx = localX + (localZ * CHUNK_WIDTH);
+		lightLevels[idx] = (short)((lightLevelRed << 8) + (lightLevelGreen << 4) + lightLevelBlue);
 	}
 
 	public short[] getShorts() {
-		return this.lightLevels;
-	}
-
-	@Override
-	public int getSaveFileConstant() {
-		return 2;
-	}
-
-	@Override
-	public void writeTo(IChunkByteWriter allChunksWriter) {
-		allChunksWriter.writeShorts(this.getShorts());
-	}
-
-	public static BlockLightShortLayer readFrom(IChunkByteReader reader) throws IOException {
-		BlockLightShortLayer blocklightshortlayer = new BlockLightShortLayer();
-		int i = blocklightshortlayer.lightLevels.length;
-
-		for (int j = 0; j < i; j++) {
-			blocklightshortlayer.lightLevels[j] = reader.readShort();
+		return lightLevels;
+	}
+
+	@Override
+	public int getSaveFileConstant() 
+	{
+		return SaveFileConstants.BLOCKLIGHTDATA_LAYER_SHORT;
+	}
+
+	@Override
+	public void writeTo(IChunkByteWriter allChunksWriter) 
+	{
+		allChunksWriter.writeShorts(getShorts());
+	}
+
+	public static BlockLightShortLayer readFrom(IChunkByteReader reader) throws IOException 
+	{
+		BlockLightShortLayer layer = new BlockLightShortLayer();
+		int l = layer.lightLevels.length;
+		for(int i = 0; i < l; i++) 
+		{
+			layer.lightLevels[i] = reader.readShort(); 
 		}
-
-		return blocklightshortlayer;
+		return layer;
 	}
 }

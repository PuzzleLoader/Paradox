--- a/finalforeach/cosmicreach/savelib/lightdata/blocklight/layers/BlockLightSingleLayer.java
+++ b/finalforeach/cosmicreach/savelib/lightdata/blocklight/layers/BlockLightSingleLayer.java
@@ -1,53 +_,67 @@
 package finalforeach.cosmicreach.savelib.lightdata.blocklight.layers;
 
 import finalforeach.cosmicreach.savelib.IChunkByteWriter;
+import finalforeach.cosmicreach.savelib.SaveFileConstants;
 import finalforeach.cosmicreach.savelib.lightdata.blocklight.BlockLightLayeredData;
 
-public class BlockLightSingleLayer implements IBlockLightLayer {
+public class BlockLightSingleLayer implements IBlockLightLayer
+{
 	private BlockLightLayeredData lightData;
 	public short lightLevel;
 	private int yLevel;
 
-	public BlockLightSingleLayer(BlockLightLayeredData lightData, int yLevel, int lightLevelRed, int lightLevelGreen, int lightLevelBlue) {
+	public BlockLightSingleLayer(BlockLightLayeredData lightData, int yLevel, int lightLevelRed, int lightLevelGreen, int lightLevelBlue) 
+	{
 		this.lightData = lightData;
 		this.yLevel = yLevel;
 		this.lightLevel = (short)((lightLevelRed << 8) + (lightLevelGreen << 4) + lightLevelBlue);
 	}
 
 	@Override
-	public short getBlockLight(int localX, int localZ) {
-		return this.lightLevel;
+	public short getBlockLight(int localX, int localZ)
+	{
+		return lightLevel;
 	}
 
 	@Override
-	public void setBlockLight(int lightLevelRed, int lightLevelGreen, int lightLevelBlue, int localX, int localZ) {
-		short short1 = (short)((lightLevelRed << 8) + (lightLevelGreen << 4) + lightLevelBlue);
-		if (short1 != this.lightLevel) {
-			int i = (byte)((this.lightLevel & 3840) >> 8);
-			int j = (byte)((this.lightLevel & 240) >> 4);
-			int k = (byte)(this.lightLevel & 15);
-			IBlockLightLayer iblocklightlayer = null;
-			if (i != lightLevelRed && j == lightLevelGreen && k == lightLevelBlue) {
-			}
-
-			if (iblocklightlayer == null) {
-				iblocklightlayer = new BlockLightShortLayer(this.lightLevel);
-				iblocklightlayer.setBlockLight(lightLevelRed, lightLevelGreen, lightLevelBlue, localX, localZ);
-			}
-
-			this.lightData.setLayer(this.yLevel, iblocklightlayer);
+	public void setBlockLight(int lightLevelRed, int lightLevelGreen, int lightLevelBlue, int localX, int localZ)
+	{
+		short newLightLevel = (short)((lightLevelRed << 8) + (lightLevelGreen << 4) + lightLevelBlue);
+		if(newLightLevel != lightLevel) 
+		{
+			int oldR = ((byte)((lightLevel & 0xF00) >> 8));
+			int oldG = ((byte)((lightLevel & 0x0F0) >> 4));
+			int oldB = ((byte)((lightLevel & 0x00F)));
+
+			IBlockLightLayer lightLayer = null;
+			if(oldR!=lightLevelRed && oldG == lightLevelGreen && oldB == lightLevelBlue) 
+			{
+				//lightLayer = new BlockLightMonoRedNibbleLayer(lightData, yLevel, lightLevel);
+				//lightLayer.setBlockLight(lightLevelRed, lightLevelGreen, lightLevelBlue, localX, localZ);
+			}
+
+			if(lightLayer == null)
+			{
+				lightLayer = new BlockLightShortLayer(lightLevel);
+				lightLayer.setBlockLight(lightLevelRed, lightLevelGreen,lightLevelBlue, localX, localZ);
+			}
+
+			lightData.setLayer(yLevel, lightLayer);
 		}
 	}
 
 	@Override
-	public int getSaveFileConstant() {
-		return 1;
+	public int getSaveFileConstant() 
+	{
+		return SaveFileConstants.BLOCKLIGHTDATA_LAYER_SINGLE;
 	}
 
 	@Override
-	public void writeTo(IChunkByteWriter allChunksWriter) {
-		allChunksWriter.writeByte((byte)((this.lightLevel & 3840) >> 8));
-		allChunksWriter.writeByte((byte)((this.lightLevel & 240) >> 4));
-		allChunksWriter.writeByte((byte)(this.lightLevel & 15));
+	public void writeTo(IChunkByteWriter allChunksWriter)
+	{
+		allChunksWriter.writeByte((byte)((lightLevel & 0xF00) >> 8));
+		allChunksWriter.writeByte((byte)((lightLevel & 0x0F0) >> 4));
+		allChunksWriter.writeByte((byte)((lightLevel & 0x00F)));
 	}
+
 }

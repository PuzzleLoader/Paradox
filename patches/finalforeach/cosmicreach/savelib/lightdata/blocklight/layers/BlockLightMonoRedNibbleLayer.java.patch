--- a/finalforeach/cosmicreach/savelib/lightdata/blocklight/layers/BlockLightMonoRedNibbleLayer.java
+++ b/finalforeach/cosmicreach/savelib/lightdata/blocklight/layers/BlockLightMonoRedNibbleLayer.java
@@ -1,11 +_,16 @@
 package finalforeach.cosmicreach.savelib.lightdata.blocklight.layers;
 
+import java.io.IOException;
+
 import finalforeach.cosmicreach.savelib.IChunkByteReader;
+import finalforeach.cosmicreach.savelib.SaveFileConstants;
 import finalforeach.cosmicreach.savelib.lightdata.blocklight.BlockLightLayeredData;
-import java.io.IOException;
 
 public class BlockLightMonoRedNibbleLayer extends BlockLightMonoNibbleLayer {
-	public BlockLightMonoRedNibbleLayer(BlockLightLayeredData lightData, int yLevel, short baseLightLevel, byte[] bytes) {
+
+	public BlockLightMonoRedNibbleLayer(BlockLightLayeredData lightData, int yLevel, short baseLightLevel,
+			byte[] bytes) 
+	{
 		super(lightData, yLevel, baseLightLevel, bytes);
 	}
 
@@ -14,15 +_,16 @@
 	}
 
 	@Override
-	public int getSaveFileConstant() {
-		return 3;
+	public int getSaveFileConstant()
+	{
+		return SaveFileConstants.BLOCKLIGHTDATA_LAYER_MONO_NIBBLE_RED;
 	}
 
 	@Override
 	protected int getRed(int localX, int localZ) {
 		return super.getNibbleLight(localX, localZ);
 	}
-
+	
 	@Override
 	protected boolean isNibbleLightRed() {
 		return true;
@@ -38,13 +_,15 @@
 		return false;
 	}
 
-	public static BlockLightMonoRedNibbleLayer readFrom(IChunkByteReader reader, BlockLightLayeredData lightData, int yLevel) throws IOException {
-		int i = reader.readByte();
-		int j = reader.readByte();
-		int k = reader.readByte();
-		short short1 = (short)((i << 8) + (j << 4) + k);
-		BlockLightMonoRedNibbleLayer blocklightmonorednibblelayer = new BlockLightMonoRedNibbleLayer(lightData, yLevel, short1);
-		reader.readFully(blocklightmonorednibblelayer.bytes);
-		return blocklightmonorednibblelayer;
+	public static BlockLightMonoRedNibbleLayer readFrom(IChunkByteReader reader, BlockLightLayeredData lightData, int yLevel) throws IOException 
+	{
+		int r = reader.readByte();
+		int g = reader.readByte();
+		int b = reader.readByte();
+		short baseLightLevel = (short)((r << 8) + (g << 4) + b);
+		BlockLightMonoRedNibbleLayer layer = new BlockLightMonoRedNibbleLayer(lightData, yLevel, baseLightLevel);
+		reader.readFully(layer.bytes);
+		return layer;
 	}
+
 }

--- a/finalforeach/cosmicreach/savelib/lightdata/blocklight/BlockLightLayeredData.java
+++ b/finalforeach/cosmicreach/savelib/lightdata/blocklight/BlockLightLayeredData.java
@@ -1,47 +_,59 @@
 package finalforeach.cosmicreach.savelib.lightdata.blocklight;
 
 import finalforeach.cosmicreach.savelib.IChunkByteWriter;
+import finalforeach.cosmicreach.savelib.ISavedChunk;
+import finalforeach.cosmicreach.savelib.SaveFileConstants;
 import finalforeach.cosmicreach.savelib.lightdata.blocklight.layers.BlockLightSingleLayer;
 import finalforeach.cosmicreach.savelib.lightdata.blocklight.layers.IBlockLightLayer;
 
-public class BlockLightLayeredData implements IBlockLightData {
-	protected static final int CHUNK_WIDTH = 16;
-	private IBlockLightLayer[] layers = new IBlockLightLayer[16];
+public class BlockLightLayeredData implements IBlockLightData
+{
+	protected static final int CHUNK_WIDTH = ISavedChunk.CHUNK_WIDTH;
+	private IBlockLightLayer[] layers = new IBlockLightLayer[CHUNK_WIDTH];
 
-	public BlockLightLayeredData() {
-		for (int i = 0; i < this.layers.length; i++) {
-			this.layers[i] = new BlockLightSingleLayer(this, i, 0, 0, 0);
+	public BlockLightLayeredData() 
+	{
+		for(int i = 0; i < layers.length; i++)
+		{
+			layers[i] = new BlockLightSingleLayer(this, i, 0, 0, 0);
 		}
 	}
 
 	@Override
-	public short getBlockLight(int localX, int localY, int localZ) {
-		return this.layers[localY].getBlockLight(localX, localZ);
+	public short getBlockLight(int localX, int localY, int localZ)
+	{
+		return layers[localY].getBlockLight(localX, localZ);
 	}
 
 	@Override
-	public void setBlockLight(int lightLevelRed, int lightLevelGreen, int lightLevelBlue, int localX, int localY, int localZ) {
-		this.layers[localY].setBlockLight(lightLevelRed, lightLevelGreen, lightLevelBlue, localX, localZ);
+	public void setBlockLight(int lightLevelRed, int lightLevelGreen, int lightLevelBlue, 
+			int localX, int localY, int localZ)
+	{
+		layers[localY].setBlockLight(lightLevelRed, lightLevelGreen, lightLevelBlue, localX, localZ);
 	}
 
 	public void setLayer(int yLevel, IBlockLightLayer layer) {
-		this.layers[yLevel] = layer;
+		layers[yLevel] = layer;
 	}
 
 	public IBlockLightLayer[] getLayers() {
-		return this.layers;
-	}
-
-	@Override
-	public int getSaveFileConstant() {
-		return 2;
-	}
-
-	@Override
-	public void writeTo(IChunkByteWriter allChunksWriter) {
-		for (IBlockLightLayer iblocklightlayer : this.getLayers()) {
-			allChunksWriter.writeByte(iblocklightlayer.getSaveFileConstant());
-			iblocklightlayer.writeTo(allChunksWriter);
+		return layers;
+	}
+
+	@Override
+	public int getSaveFileConstant() 
+	{
+		return SaveFileConstants.BLOCKLIGHTDATA_LAYERED;
+	}
+
+	@Override
+	public void writeTo(IChunkByteWriter allChunksWriter) 
+	{
+		for(var layer : getLayers()) 
+		{
+			allChunksWriter.writeByte(layer.getSaveFileConstant());
+			layer.writeTo(allChunksWriter);
 		}
 	}
+
 }

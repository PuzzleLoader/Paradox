--- a/finalforeach/cosmicreach/savelib/lightdata/skylight/SkylightLayeredData.java
+++ b/finalforeach/cosmicreach/savelib/lightdata/skylight/SkylightLayeredData.java
@@ -2,54 +_,62 @@
 
 import finalforeach.cosmicreach.savelib.IChunkByteWriter;
 import finalforeach.cosmicreach.savelib.ISavedChunk;
+import finalforeach.cosmicreach.savelib.SaveFileConstants;
 import finalforeach.cosmicreach.savelib.lightdata.skylight.layers.ISkylightDataLayer;
 import finalforeach.cosmicreach.savelib.lightdata.skylight.layers.SkylightDataSingleLayer;
 
-public class SkylightLayeredData implements ISkylightData {
-	private ISkylightDataLayer[] layers = new ISkylightDataLayer[16];
-
-	public SkylightLayeredData() {
+public class SkylightLayeredData implements ISkylightData
+{
+	private ISkylightDataLayer[] layers = new ISkylightDataLayer[CHUNK_WIDTH];
+	
+	public SkylightLayeredData() 
+	{
 		this((byte)0);
 	}
-
-	public SkylightLayeredData(byte skylightValue) {
-		for (int i = 0; i < this.layers.length; i++) {
-			this.layers[i] = SkylightDataSingleLayer.getForLightValue(skylightValue);
+	public SkylightLayeredData(byte skylightValue)
+	{
+		for(int i = 0; i < layers.length; i++)
+		{
+			layers[i] = SkylightDataSingleLayer.getForLightValue(skylightValue);
 		}
 	}
 
 	@Override
-	public int getSkyLight(int localX, int localY, int localZ) {
-		return this.layers[localY].getSkyLight(localX, localZ);
+	public int getSkyLight(int localX, int localY, int localZ) 
+	{
+		return layers[localY].getSkyLight(localX, localZ);
 	}
 
 	@Override
-	public void setSkyLight(ISavedChunk<?> chunk, int lightLevel, int localX, int localY, int localZ) {
-		this.layers[localY].setSkyLight(this, lightLevel, localX, localY, localZ);
+	public void setSkyLight(ISavedChunk<?> chunk, int lightLevel, int localX, int localY, int localZ)
+	{
+		layers[localY].setSkyLight(this, lightLevel, localX, localY, localZ);
 	}
 
 	public void setLayer(int yLevel, ISkylightDataLayer skyLightLayer) {
-		this.layers[yLevel] = skyLightLayer;
-	}
-
-	public ISkylightDataLayer getLayer(int yLevel) {
-		return this.layers[yLevel];
-	}
-
+		layers[yLevel] = skyLightLayer;
+	}
+
+	public ISkylightDataLayer getLayer(int yLevel) 
+	{
+		return layers[yLevel];
+	}
 	public ISkylightDataLayer[] getLayers() {
-		return this.layers;
-	}
-
-	@Override
-	public int getSaveFileConstant() {
-		return 2;
-	}
-
-	@Override
-	public void writeTo(IChunkByteWriter allChunksWriter) {
-		for (ISkylightDataLayer iskylightdatalayer : this.getLayers()) {
-			allChunksWriter.writeByte(iskylightdatalayer.getSaveFileConstant());
-			iskylightdatalayer.writeTo(allChunksWriter);
-		}
+		return layers;
+	}
+	
+	@Override
+	public int getSaveFileConstant() 
+	{
+		return SaveFileConstants.SKYLIGHTDATA_LAYERED;
+	}
+	@Override
+	public void writeTo(IChunkByteWriter allChunksWriter)
+	{
+		for(var layer : getLayers()) 
+		{
+			allChunksWriter.writeByte(layer.getSaveFileConstant());
+			layer.writeTo(allChunksWriter);
+		}		
 	}
 }

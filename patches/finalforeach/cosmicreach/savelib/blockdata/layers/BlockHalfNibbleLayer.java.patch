--- a/finalforeach/cosmicreach/savelib/blockdata/layers/BlockHalfNibbleLayer.java
+++ b/finalforeach/cosmicreach/savelib/blockdata/layers/BlockHalfNibbleLayer.java
@@ -1,107 +_,131 @@
 package finalforeach.cosmicreach.savelib.blockdata.layers;
 
 import finalforeach.cosmicreach.savelib.IChunkByteWriter;
+import finalforeach.cosmicreach.savelib.SaveFileConstants;
 import finalforeach.cosmicreach.savelib.blockdata.LayeredBlockData;
 
-public class BlockHalfNibbleLayer<T> implements IBlockLayer<T> {
-	public static final int TOTAL_BYTES = 64;
+public class BlockHalfNibbleLayer<T> implements IBlockLayer<T>
+{
+	public static final int TOTAL_BYTES = CHUNK_WIDTH * CHUNK_WIDTH / 4;
 	private final byte[] blockIDs;
-
-	public BlockHalfNibbleLayer(byte[] bytes) {
+	
+	public BlockHalfNibbleLayer(byte[] bytes) 
+	{
 		this.blockIDs = bytes;
 	}
-
-	public BlockHalfNibbleLayer(LayeredBlockData<T> chunkData, int localY, T blockState) {
-		this.blockIDs = new byte[64];
-
-		for (int i = 0; i < 16; i++) {
-			for (int j = 0; j < 16; j++) {
-				this.setBlockValue(chunkData, blockState, i, localY, j);
-			}
-		}
-	}
-
-	public BlockHalfNibbleLayer(LayeredBlockData<T> chunkData, int localY, IBlockLayer<T> srcLayer) {
-		this.blockIDs = new byte[64];
-
-		for (int i = 0; i < 16; i++) {
-			for (int j = 0; j < 16; j++) {
-				this.setBlockValue(chunkData, srcLayer.getBlockValue(chunkData, i, j), i, localY, j);
-			}
-		}
-	}
+	
+	public BlockHalfNibbleLayer(LayeredBlockData<T> chunkData, int localY, T blockState) 
+	{
+		this.blockIDs = new byte[TOTAL_BYTES];
+		
+		for(int i = 0; i < CHUNK_WIDTH; i++) 
+		{
+			for(int k = 0; k < CHUNK_WIDTH; k++) 
+			{
+				setBlockValue(chunkData, blockState, i, localY, k);
+			}
+		}
+	}
+	
+	public BlockHalfNibbleLayer(LayeredBlockData<T> chunkData, int localY, IBlockLayer<T> srcLayer) 
+	{
+		this.blockIDs = new byte[TOTAL_BYTES];
+		for(int i = 0; i < CHUNK_WIDTH; i++) 
+		{
+			for(int k = 0; k < CHUNK_WIDTH; k++) 
+			{
+				setBlockValue(chunkData, srcLayer.getBlockValue(chunkData, i, k), i, localY, k);
+			}
+		}
+	}
+
 
 	public int getBlockValueID(LayeredBlockData<T> chunkData, int localX, int localZ) {
-		int i = (localX + localZ * 16) / 4;
-		byte b0 = this.blockIDs[i];
-		int j = localX % 4;
-
-		return switch (j) {
-			case 0 -> b0 & 3;
-			case 1 -> (b0 & 12) >> 2;
-			case 2 -> (b0 & 48) >> 4;
-			case 3 -> (b0 & 192) >> 6;
-			default -> throw new IllegalArgumentException("Unexpected value: " + j);
+		final int idx = (localX + (localZ * CHUNK_WIDTH)) / 4;
+		final byte b = blockIDs[idx];
+		
+		int mod = localX % 4;
+		int blockID = switch (mod) 
+		{
+			case 0 -> b & 0x03;
+			case 1 -> (b & 0x0C) >> 2;
+			case 2 -> (b & 0x30) >> 4;
+			case 3 -> (b & 0xC0) >> 6;
+			default -> throw new IllegalArgumentException("Unexpected value: " + mod);
 		};
-	}
-
-	@Override
-	public T getBlockValue(LayeredBlockData<T> chunkData, int localX, int localZ) {
-		return chunkData.getBlockValueFromPaletteId(this.getBlockValueID(chunkData, localX, localZ));
-	}
-
-	public boolean upgradeLayer(int paletteID, LayeredBlockData<T> chunkData, T blockValue, int localX, int localY, int localZ) {
-		if (paletteID > 255) {
-			BlockShortLayer<T> blockshortlayer = new BlockShortLayer<>(chunkData, localY, this);
-			blockshortlayer.setBlockValue(chunkData, blockValue, localX, localY, localZ);
-			chunkData.setLayer(localY, blockshortlayer);
-			return true;
-		} else if (paletteID > 15) {
-			BlockByteLayer<T> blockbytelayer = new BlockByteLayer<>(chunkData, localY, this);
-			blockbytelayer.setBlockValue(chunkData, blockValue, localX, localY, localZ);
-			chunkData.setLayer(localY, blockbytelayer);
-			return true;
-		} else if (paletteID > 3) {
-			BlockNibbleLayer<T> blocknibblelayer = new BlockNibbleLayer<>(chunkData, localY, this);
-			blocknibblelayer.setBlockValue(chunkData, blockValue, localX, localY, localZ);
-			chunkData.setLayer(localY, blocknibblelayer);
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	@Override
-	public void setBlockValue(LayeredBlockData<T> chunkData, T blockValue, int localX, int localY, int localZ) {
-		int i = chunkData.getBlockValueIDAddIfMissing(blockValue);
-		if (!this.upgradeLayer(i, chunkData, blockValue, localX, localY, localZ)) {
-			T t = this.getBlockValue(chunkData, localX, localZ);
-			if (blockValue != t) {
-				int j = (localX + localZ * 16) / 4;
-				int k = this.blockIDs[j];
-
-				this.blockIDs[j] = switch (localX % 4) {
-					case 0 -> (byte)(k & 252 | i);
-					case 1 -> (byte)(k & 243 | i << 2);
-					case 2 -> (byte)(k & 207 | i << 4);
-					case 3 -> (byte)(k & 63 | i << 6);
-					default -> throw new IllegalArgumentException("Unexpected value: " + localX % 4);
-				};
-			}
+		return blockID;
+	}
+
+	@Override
+	public T getBlockValue(LayeredBlockData<T> chunkData, int localX, int localZ) 
+	{
+		return chunkData.getBlockValueFromPaletteId(getBlockValueID(chunkData, localX, localZ));
+	}
+	public boolean upgradeLayer(int paletteID, LayeredBlockData<T> chunkData, T blockValue, int localX, int localY, int localZ) 
+	{
+		if(paletteID > 255)
+		{
+			final var layer = new BlockShortLayer<T>(chunkData, localY, this);
+			layer.setBlockValue(chunkData, blockValue, localX, localY, localZ);
+			chunkData.setLayer(localY, layer);
+			return true;
+		}
+		if(paletteID > 15)
+		{
+			final var layer = new BlockByteLayer<T>(chunkData, localY, this);
+			layer.setBlockValue(chunkData, blockValue, localX, localY, localZ);
+			chunkData.setLayer(localY, layer);
+			return true;
+		}
+		if(paletteID > 3)
+		{
+			final var layer = new BlockNibbleLayer<T>(chunkData, localY, this);
+			layer.setBlockValue(chunkData, blockValue, localX, localY, localZ);
+			chunkData.setLayer(localY, layer);
+			return true;
+		}
+		return false;
+	}
+	@Override
+	public void setBlockValue(LayeredBlockData<T> chunkData, T blockValue, int localX, int localY, int localZ) 
+	{
+		int paletteID = chunkData.getBlockValueIDAddIfMissing(blockValue);
+		
+		if(upgradeLayer(paletteID, chunkData, blockValue, localX, localY, localZ)) 
+		{
+			return;
+		}
+		
+		final T oldBlock = getBlockValue(chunkData, localX, localZ);
+		if(blockValue!=oldBlock) 
+		{
+			final int idx = (localX + (localZ * CHUNK_WIDTH)) / 4;
+			final int b = blockIDs[idx];
+			
+			blockIDs[idx] = switch (localX % 4) 
+			{
+				case 0 -> (byte) ((b & 0xFC) | paletteID);
+				case 1 -> (byte) ((b & 0xF3) | (paletteID << 2));
+				case 2 -> (byte) ((b & 0xCF) | (paletteID << 4));
+				case 3 -> (byte) ((b & 0x3F) | (paletteID << 6));
+				default -> throw new IllegalArgumentException("Unexpected value: " + localX % 4);
+			};
 		}
 	}
 
 	public byte[] getBytes() {
-		return this.blockIDs;
-	}
-
-	@Override
-	public int getSaveFileConstant(LayeredBlockData<T> chunkData) {
-		return 3;
-	}
-
-	@Override
-	public void writeTo(LayeredBlockData<T> chunkData, IChunkByteWriter allChunksWriter) {
-		allChunksWriter.writeBytes(this.getBytes());
+		return blockIDs;
+	}
+	
+	@Override
+	public int getSaveFileConstant(LayeredBlockData<T> chunkData) 
+	{
+		return SaveFileConstants.BLOCK_LAYER_HALFNIBBLE;
+	}
+
+	@Override
+	public void writeTo(LayeredBlockData<T> chunkData, IChunkByteWriter allChunksWriter) 
+	{
+		allChunksWriter.writeBytes(getBytes());
 	}
 }

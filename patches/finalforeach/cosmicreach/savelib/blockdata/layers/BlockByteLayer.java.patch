--- a/finalforeach/cosmicreach/savelib/blockdata/layers/BlockByteLayer.java
+++ b/finalforeach/cosmicreach/savelib/blockdata/layers/BlockByteLayer.java
@@ -1,81 +_,98 @@
 package finalforeach.cosmicreach.savelib.blockdata.layers;
 
 import finalforeach.cosmicreach.savelib.IChunkByteWriter;
+import finalforeach.cosmicreach.savelib.SaveFileConstants;
 import finalforeach.cosmicreach.savelib.blockdata.LayeredBlockData;
 
-public class BlockByteLayer<T> implements IBlockLayer<T> {
-	public static final int TOTAL_BYTES = 256;
+public class BlockByteLayer<T> implements IBlockLayer<T>
+{
+	public static final int TOTAL_BYTES = CHUNK_WIDTH * CHUNK_WIDTH;
 	private final byte[] blockIDs;
 
-	public BlockByteLayer(byte[] bytes) {
+	public BlockByteLayer(byte[] bytes) 
+	{
 		this.blockIDs = bytes;
 	}
 
-	public BlockByteLayer(LayeredBlockData<T> chunkData, int localY, T blockValue) {
-		this.blockIDs = new byte[256];
-
-		for (int i = 0; i < 16; i++) {
-			for (int j = 0; j < 16; j++) {
-				this.setBlockValue(chunkData, blockValue, i, localY, j);
+	public BlockByteLayer(LayeredBlockData<T> chunkData, int localY, T blockValue) 
+	{
+		this.blockIDs = new byte[TOTAL_BYTES];
+		for(int i = 0; i < CHUNK_WIDTH; i++) 
+		{
+			for(int k = 0; k < CHUNK_WIDTH; k++) 
+			{
+				setBlockValue(chunkData, blockValue, i, localY, k);
 			}
 		}
 	}
-
-	public BlockByteLayer(LayeredBlockData<T> chunkData, int localY, IBlockLayer<T> nibbleLayer) {
-		this.blockIDs = new byte[256];
-
-		for (int i = 0; i < 16; i++) {
-			for (int j = 0; j < 16; j++) {
-				this.setBlockValue(chunkData, nibbleLayer.getBlockValue(chunkData, i, j), i, localY, j);
+	
+	public BlockByteLayer(LayeredBlockData<T> chunkData, int localY, IBlockLayer<T> nibbleLayer) 
+	{
+		this.blockIDs = new byte[TOTAL_BYTES];
+		for(int i = 0; i < CHUNK_WIDTH; i++) 
+		{
+			for(int k = 0; k < CHUNK_WIDTH; k++) 
+			{
+				setBlockValue(chunkData, nibbleLayer.getBlockValue(chunkData, i, k), i, localY, k);
 			}
 		}
 	}
 
 	@Override
 	public T getBlockValue(LayeredBlockData<T> chunkData, int localX, int localZ) {
-		return chunkData.getBlockValueFromPaletteId(this.getBlockValueID(chunkData, localX, localZ));
+		return chunkData.getBlockValueFromPaletteId(getBlockValueID(chunkData, localX, localZ));
 	}
 
 	public int getBlockValueID(LayeredBlockData<T> chunkData, int localX, int localZ) {
-		int i = localX + localZ * 16;
-		byte b0 = this.blockIDs[i];
-		return b0 & 0xFF;
+		int idx = localX + (localZ * CHUNK_WIDTH);
+		byte blockID = blockIDs[idx];
+
+		return blockID & 0xFF;
 	}
 
-	public boolean upgradeLayer(int paletteID, LayeredBlockData<T> chunkData, T blockValue, int localX, int localY, int localZ) {
-		if (paletteID > 255) {
-			BlockShortLayer<T> blockshortlayer = new BlockShortLayer<>(chunkData, localY, this);
-			blockshortlayer.setBlockValue(chunkData, blockValue, localX, localY, localZ);
-			chunkData.setLayer(localY, blockshortlayer);
+	public boolean upgradeLayer(int paletteID, LayeredBlockData<T> chunkData, T blockValue, int localX, int localY, int localZ) 
+	{
+		if(paletteID > 255)
+		{
+			final var layer = new BlockShortLayer<T>(chunkData, localY, this);
+			layer.setBlockValue(chunkData, blockValue, localX, localY, localZ);
+			chunkData.setLayer(localY, layer);
 			return true;
-		} else {
-			return false;
 		}
+		return false;
 	}
 
 	@Override
-	public void setBlockValue(LayeredBlockData<T> chunkData, T blockValue, int localX, int localY, int localZ) {
-		int i = chunkData.getBlockValueIDAddIfMissing(blockValue);
-		if (!this.upgradeLayer(i, chunkData, blockValue, localX, localY, localZ)) {
-			T t = this.getBlockValue(chunkData, localX, localZ);
-			if (blockValue != t) {
-				int j = localX + localZ * 16;
-				this.blockIDs[j] = (byte)i;
-			}
+	public void setBlockValue(LayeredBlockData<T> chunkData, T blockValue, int localX, int localY, int localZ) 
+	{
+		int paletteID = chunkData.getBlockValueIDAddIfMissing(blockValue);
+
+		if(upgradeLayer(paletteID, chunkData, blockValue, localX, localY, localZ)) 
+		{
+			return;
+		}
+		
+		final T oldBlock = getBlockValue(chunkData, localX, localZ);
+		if(blockValue != oldBlock) 
+		{
+			final int idx = localX + (localZ * CHUNK_WIDTH);
+			blockIDs[idx] = (byte) paletteID;
 		}
 	}
 
 	public byte[] getBytes() {
-		return this.blockIDs;
-	}
-
-	@Override
-	public int getSaveFileConstant(LayeredBlockData<T> chunkData) {
-		return 5;
-	}
-
-	@Override
-	public void writeTo(LayeredBlockData<T> chunkData, IChunkByteWriter allChunksWriter) {
-		allChunksWriter.writeBytes(this.getBytes());
+		return blockIDs;
+	}
+	
+	@Override
+	public int getSaveFileConstant(LayeredBlockData<T> chunkData) 
+	{
+		return SaveFileConstants.BLOCK_LAYER_BYTE;
+	}
+
+	@Override
+	public void writeTo(LayeredBlockData<T> chunkData, IChunkByteWriter allChunksWriter) 
+	{
+		allChunksWriter.writeBytes(getBytes());
 	}
 }

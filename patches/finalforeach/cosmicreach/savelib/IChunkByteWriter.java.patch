--- a/finalforeach/cosmicreach/savelib/IChunkByteWriter.java
+++ b/finalforeach/cosmicreach/savelib/IChunkByteWriter.java
@@ -2,39 +_,50 @@
 
 import finalforeach.cosmicreach.savelib.blocks.IBlockState;
 
-public interface IChunkByteWriter {
-	void writeInt(int var1);
-
-	void writeByte(int var1);
-
-	void writeShort(short var1);
-
-	void writeString(String var1);
-
-	default <T> void writeBlockValue(T blockValue) {
-		if (blockValue instanceof IBlockState iblockstate) {
-			String s = iblockstate.getSaveKey();
-			this.writeString(s);
-		} else {
+public interface IChunkByteWriter
+{
+	void writeInt(int i);
+
+	void writeByte(int b);
+	
+	void writeShort(short s);
+	
+	void writeString(String s);
+
+	default <T> void writeBlockValue(T blockValue)
+	{
+		if(blockValue instanceof IBlockState blockState)
+		{
+			String saveKey = blockState.getSaveKey();
+			writeString(saveKey);
+		}else
+		{
 			throw new RuntimeException("writeBlockValue() not implemented for " + blockValue.getClass().getSimpleName());
 		}
 	}
-
-	default void writeShorts(short[] shorts) {
-		for (short short1 : shorts) {
-			this.writeShort(short1);
-		}
-	}
-
-	default void writeBytes(byte[] bytes) {
-		for (byte b0 : bytes) {
-			this.writeByte(b0);
-		}
-	}
-
-	default void writeBytes(byte[] bytes, int len) {
-		for (int i = 0; i < len; i++) {
-			this.writeByte(bytes[i]);
-		}
-	}
+	
+	default void writeShorts(short[] shorts)
+	{
+		for(short s : shorts)
+		{
+			writeShort(s);
+		}
+	}
+	
+	default void writeBytes(byte[] bytes) 
+	{
+		for(byte b : bytes)
+		{
+			writeByte(b);
+		}
+	}
+	
+	default void writeBytes(byte[] bytes, int len)
+	{
+		for(int i = 0; i < len; i++)
+		{
+			writeByte(bytes[i]);
+		}
+	}
+
 }

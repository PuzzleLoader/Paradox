--- a/finalforeach/cosmicreach/savelib/crbin/CRBinSchema.java
+++ b/finalforeach/cosmicreach/savelib/crbin/CRBinSchema.java
@@ -1,86 +_,103 @@
 package finalforeach.cosmicreach.savelib.crbin;
 
+import java.nio.charset.StandardCharsets;
+import java.util.Objects;
+
 import finalforeach.cosmicreach.savelib.utils.DynamicArrays;
 import finalforeach.cosmicreach.savelib.utils.IDynamicArray;
 import finalforeach.cosmicreach.savelib.utils.RawByteArrayUtils;
-import java.nio.charset.StandardCharsets;
-import java.util.Objects;
-
-public class CRBinSchema {
-	private IDynamicArray<CRBinSchema.SchemaItem> schema = DynamicArrays.getNew(CRBinSchema.SchemaItem.class);
-
-	public void add(String name, SchemaType type) {
-		if (name != null) {
-			for (int i = 0; i < this.schema.size(); i++) {
-				CRBinSchema.SchemaItem crbinschema$schemaitem = this.schema.get(i);
-				if (crbinschema$schemaitem.name.equalsIgnoreCase(name)) {
-					throw new RuntimeException("Duplicate name in schema: " + name);
-				}
-			}
-
-			CRBinSchema.SchemaItem crbinschema$schemaitem1 = new CRBinSchema.SchemaItem(name, type);
-			this.schema.add(crbinschema$schemaitem1);
-		}
-	}
-
-	public Iterable<CRBinSchema.SchemaItem> getSchema() {
-		return this.schema;
-	}
-
-	public byte[] getBytes() {
-		int i = 0;
-
-		for (CRBinSchema.SchemaItem crbinschema$schemaitem : this.schema) {
-			i = ++i + 4;
-			if (crbinschema$schemaitem.name != null) {
-				i += crbinschema$schemaitem.name.getBytes(StandardCharsets.UTF_8).length;
-			}
-		}
-
-		byte[] abyte = new byte[++i];
-		int j = 0;
-
-		for (CRBinSchema.SchemaItem crbinschema$schemaitem1 : this.schema) {
-			j = RawByteArrayUtils.writeByte(j, abyte, crbinschema$schemaitem1.type.byteId);
-			j = RawByteArrayUtils.writeString(j, abyte, crbinschema$schemaitem1.name);
-		}
-
-		j = RawByteArrayUtils.writeByte(j, abyte, SchemaType.SCHEMA_END.byteId);
-		return abyte;
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.schema);
-	}
-
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj) {
+
+public class CRBinSchema
+{
+	public record SchemaItem(String name, SchemaType type) {}
+
+	private IDynamicArray<SchemaItem> schema = DynamicArrays.getNew(SchemaItem.class);
+
+	public void add(String name, SchemaType type)
+	{
+		if(name==null) 
+		{
+			return;
+		}
+
+		for(int i = 0; i < schema.size(); i++)
+		{
+			var s = schema.get(i);
+			if(s.name.equalsIgnoreCase(name))
+			{
+				throw new RuntimeException("Duplicate name in schema: " + name);
+			}
+		}
+		var item = new SchemaItem(name, type);
+		schema.add(item);		
+	}
+
+	public Iterable<SchemaItem> getSchema()
+	{
+		return schema;
+	}
+
+	public byte[] getBytes()
+	{
+		int byteCount = 0;
+
+		for(var item : schema)
+		{
+			byteCount++; // For the schema item type
+			byteCount+=Integer.BYTES; // For the string length or null specifier
+			if(item.name!=null) 
+			{
+				byteCount+=item.name.getBytes(StandardCharsets.UTF_8).length; // the string's bytes
+			}
+		}
+		byteCount++; // For schema end
+
+		byte[] bytes = new byte[byteCount];
+		int byteIdx = 0;
+		for(var item : schema)
+		{
+			// Write the schema item type byte
+			byteIdx = RawByteArrayUtils.writeByte(byteIdx, bytes, item.type.byteId);
+			
+			// Write the name of the schema item
+			byteIdx = RawByteArrayUtils.writeString(byteIdx, bytes, item.name);	
+		}
+
+		// Write the ending byte, the schema is done after this!
+		byteIdx = RawByteArrayUtils.writeByte(byteIdx, bytes, SchemaType.SCHEMA_END.byteId);
+
+		return bytes;
+	}
+
+	@Override
+	public int hashCode()
+	{
+		return Objects.hash(schema);
+	}
+
+	@Override
+	public boolean equals(Object obj)
+	{
+		if (this == obj)
 			return true;
-		} else if (obj != null && this.getClass() == obj.getClass()) {
-			CRBinSchema crbinschema = (CRBinSchema)obj;
-			return Objects.equals(this.schema, crbinschema.schema);
-		} else {
+		if ((obj == null) || (getClass() != obj.getClass()))
 			return false;
-		}
+		CRBinSchema other = (CRBinSchema) obj;
+		return Objects.equals(schema, other.schema);
 	}
-
+	
 	@Override
-	public String toString() {
-		StringBuilder stringbuilder = new StringBuilder("[");
-
-		for (CRBinSchema.SchemaItem crbinschema$schemaitem : this.schema) {
-			stringbuilder.append(crbinschema$schemaitem.name);
-			stringbuilder.append(":");
-			stringbuilder.append(crbinschema$schemaitem.type);
-			stringbuilder.append(",");
+	public String toString() 
+	{
+		StringBuilder sb = new StringBuilder("[");
+		for(var s : schema) 
+		{
+			sb.append(s.name);
+			sb.append(":");
+			sb.append(s.type);
+			sb.append(",");
 		}
-
-		stringbuilder.append("]");
-		return stringbuilder.toString();
-	}
-
-	public static record SchemaItem(String name, SchemaType type) {
+		sb.append("]");
+		return sb.toString();
 	}
 }

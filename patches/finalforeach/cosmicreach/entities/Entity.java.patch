--- a/finalforeach/cosmicreach/entities/Entity.java
+++ b/finalforeach/cosmicreach/entities/Entity.java
@@ -34,7 +_,7 @@
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 
-public class Entity implements ICRBinSerializable {
+public class Entity extends com.github.puzzle.paradox.game.entity.InternalParadoxEntity implements ICRBinSerializable {
 	public static Vector3 gravity = new Vector3(0.0F, -29.400002F, 0.0F);
 	protected static final transient Matrix4 tmpModelMatrix = new Matrix4();
 	protected static final transient Vector3 tmpRenderPos = new Vector3();
@@ -47,7 +_,7 @@
 	@CRBSerialized
 	public String entityTypeId;
 	@CRBSerialized
-	float sightRange = 64.0F;
+    public float sightRange = 64.0F;
 	@CRBSerialized
 	public float gravityModifier = 1.0F;
 	@CRBSerialized
@@ -264,13 +_,15 @@
 			if (ServerSingletons.SERVER != null) {
 				ServerSingletons.SERVER.broadcast(this.zone, new HitEntityPacket(this, amount));
 			}
-
+			if(com.github.puzzle.paradox.api.Paradox.getInstance().getEventBus().post(new com.github.puzzle.paradox.api.events.EntityEvents.OnTakeDamage(this.getParadoxEntity(),null, amount, null)).isCanceled())
+				return;
 			if (amount < 0.0F) {
 				this.hitpoints = Math.min(this.hitpoints - amount, this.maxHitpoints);
 			} else if (this.getPendingDamage() == 0.0F && this.invulnerabiltyFrames <= 0) {
 				this.setPendingDamage(Math.max(this.getPendingDamage(), amount));
 				this.invulnerabiltyFrames = 5;
 			}
+
 		}
 	}
 

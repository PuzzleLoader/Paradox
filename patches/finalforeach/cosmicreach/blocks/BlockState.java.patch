--- a/finalforeach/cosmicreach/blocks/BlockState.java
+++ b/finalforeach/cosmicreach/blocks/BlockState.java
@@ -1,12 +_,7 @@
 package finalforeach.cosmicreach.blocks;
 
 import com.badlogic.gdx.math.collision.BoundingBox;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.Json;
-import com.badlogic.gdx.utils.JsonValue;
-import com.badlogic.gdx.utils.ObjectIntMap;
-import com.badlogic.gdx.utils.ObjectSet;
-import com.badlogic.gdx.utils.OrderedMap;
+import com.badlogic.gdx.utils.*;
 import com.badlogic.gdx.utils.Json.Serializable;
 import com.badlogic.gdx.utils.ObjectMap.Entry;
 import finalforeach.cosmicreach.GameSingletons;
@@ -20,10 +_,14 @@
 import finalforeach.cosmicreach.savelib.blocks.IBlockState;
 import finalforeach.cosmicreach.util.ArrayUtils;
 import finalforeach.cosmicreach.util.JsonPredicateParser;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import finalforeach.cosmicreach.util.exceptions.MissingBlockStateException;
 import java.util.Map;
 import java.util.function.Predicate;
 import java.util.regex.Pattern;
+import java.lang.StringBuilder;
 
 public class BlockState implements IBlockState, Serializable {
 	private static final Pattern idAndParamsPattern = Pattern.compile("[\\[\\]]");
@@ -381,14 +_,14 @@
 	public boolean hasIntProperty(String propertyName) {
 		return this.intProperties.containsKey(propertyName);
 	}
-
 	public boolean hasTag(String tagName) {
 		return this.tags == null ? false : ArrayUtils.contains(this.tags, tagName, false);
 	}
-
+   private static final Logger LOGGER = LoggerFactory.getLogger("Cosmic Reach | Block states");
 	public void initialize(Block block) {
 		this.block = block;
 		this.blockId = block.getStringId();
+		this.blockId = block.getStringId();
 		if (this.swapGroupId == null) {
 			this.swapGroupId = this.getSaveKey();
 		}
@@ -405,7 +_,7 @@
 		if (this.stateGenerators != null) {
 			for (String s : this.stateGenerators) {
 				BlockStateGenerator blockstategenerator = BlockStateGenerator.getInstance(s);
-				System.out.println("Applying generator " + s + " for blockstate: " + this.getSaveKey());
+            	LOGGER.info("Applying generator " + s + " for blockstate: " + this.getSaveKey());
 				blockstategenerator.generate(this);
 			}
 		}
@@ -497,7 +_,7 @@
 		this.hardness = jsonData.getFloat("hardness", 1.5F);
 		this.blastResistance = jsonData.getFloat("blastResistance", 100.0F);
 		this.friction = jsonData.getFloat("friction", 1.0F);
-		json.readField(this, "stateGenerators", jsonData);
+		json.readField(this,  "stateGenerators", jsonData);
 		json.readField(this, "tags", jsonData);
 		json.readField(this, "dropParams", jsonData);
 		json.readField(this, "intProperties", jsonData);
